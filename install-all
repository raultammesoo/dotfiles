#!/usr/bin/env zsh

# set -e

# ##     ## ######## ##       ########  ######## ########   ######
# ##     ## ##       ##       ##     ## ##       ##     ## ##    ##
# ##     ## ##       ##       ##     ## ##       ##     ## ##
# ######### ######   ##       ########  ######   ########   ######
# ##     ## ##       ##       ##        ##       ##   ##         ##
# ##     ## ##       ##       ##        ##       ##    ##  ##    ##
# ##     ## ######## ######## ##        ######## ##     ##  ######

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
  echo ''
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
  echo ''
}

info_stream () {
  while read data; do
      printf "\r  [ \033[00;34m..\033[0m ] $data\n"
  done
  # echo ''
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  # echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}

#  ######  ########    ###    ########  ########
# ##    ##    ##      ## ##   ##     ##    ##
# ##          ##     ##   ##  ##     ##    ##
#  ######     ##    ##     ## ########     ##
#       ##    ##    ######### ##   ##      ##
# ##    ##    ##    ##     ## ##    ##     ##
#  ######     ##    ##     ## ##     ##    ##

# Ask for the administrator password upfront
# info "Get sudo"
if sudo -v 2>&1
then
  success "Got sudo"
else
  fail "Error getting sudo"
fi

# setup_gitconfig

# if setup_gitconfig 2>&1
# then
#   success "Git config setup done"
# else
#   fail "Error setting up git config"
# fi


# Keep-alive: update existing `sudo` time stamp until `.osx` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# ########   #######  ######## ########   #######  ########
# ##     ## ##     ##    ##    ##     ## ##     ##    ##
# ##     ## ##     ##    ##    ##     ## ##     ##    ##
# ##     ## ##     ##    ##    ########  ##     ##    ##
# ##     ## ##     ##    ##    ##     ## ##     ##    ##
# ##     ## ##     ##    ##    ##     ## ##     ##    ##
# ########   #######     ##    ########   #######     ##

CONFIG=".install.conf.yaml"
DOTBOT_DIR="dotbot"

DOTBOT_BIN="bin/dotbot"
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

info "Update Dotbot git submodule dependencies"
cd "${BASEDIR}"

if git -C "${DOTBOT_DIR}" submodule sync --quiet --recursive 2>&1
then
  success "Submodule sync successfull"
else
  fail "Error while: Submodule sync"
fi

if git submodule update --init --recursive "${DOTBOT_DIR}" 2>&1
then
  success "Submodule update successfull"
else
  fail "Error while: Submodule update"
fi

info "Start Dotbot"
"${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}" -d "${BASEDIR}" -c "${CONFIG}" "${@}" | info_stream
success "Dotbot finished"


# ##     ##    ###     ######      ######  ######## ##     ## ######## ########
# ###   ###   ## ##   ##    ##    ##    ##    ##    ##     ## ##       ##
# #### ####  ##   ##  ##          ##          ##    ##     ## ##       ##
# ## ### ## ##     ## ##           ######     ##    ##     ## ######   ######
# ##     ## ######### ##                ##    ##    ##     ## ##       ##
# ##     ## ##     ## ##    ##    ##    ##    ##    ##     ## ##       ##
# ##     ## ##     ##  ######      ######     ##     #######  ##       ##
# If we're on a Mac, let's install and setup other stuff.
if [ "$(uname -s)" == "Darwin" ]
then
    export DOTS=$HOME/.dotfiles

  #  #######   ######  ##     ##    ########  ######## ########    ###    ##     ## ##       ########  ######
  # ##     ## ##    ##  ##   ##     ##     ## ##       ##         ## ##   ##     ## ##          ##    ##    ##
  # ##     ## ##         ## ##      ##     ## ##       ##        ##   ##  ##     ## ##          ##    ##
  # ##     ##  ######     ###       ##     ## ######   ######   ##     ## ##     ## ##          ##     ######
  # ##     ##       ##   ## ##      ##     ## ##       ##       ######### ##     ## ##          ##          ##
  # ##     ## ##    ##  ##   ##     ##     ## ##       ##       ##     ## ##     ## ##          ##    ##    ##
  #  #######   ######  ##     ##    ########  ######## ##       ##     ##  #######  ########    ##     ######
  info "Set OS X defaults"
  if $DOTS/osx/set-defaults.sh 2>&1
  then
    success "OS X defaults set"
  else
    fail "Error setting OS X defaults"
  fi
  user "Note that some of these changes require a logout/restart to take effect."

  # #### ##    ##  ######  ########    ###    ##       ##           ######   #######  ######## ######## ##      ##    ###    ########  ########
  #  ##  ###   ## ##    ##    ##      ## ##   ##       ##          ##    ## ##     ## ##          ##    ##  ##  ##   ## ##   ##     ## ##
  #  ##  ####  ## ##          ##     ##   ##  ##       ##          ##       ##     ## ##          ##    ##  ##  ##  ##   ##  ##     ## ##
  #  ##  ## ## ##  ######     ##    ##     ## ##       ##           ######  ##     ## ######      ##    ##  ##  ## ##     ## ########  ######
  #  ##  ##  ####       ##    ##    ######### ##       ##                ## ##     ## ##          ##    ##  ##  ## ######### ##   ##   ##
  #  ##  ##   ### ##    ##    ##    ##     ## ##       ##          ##    ## ##     ## ##          ##    ##  ##  ## ##     ## ##    ##  ##
  # #### ##    ##  ######     ##    ##     ## ######## ########     ######   #######  ##          ##     ###  ###  ##     ## ##     ## ########
  info "Installing dependencies and software using $DOTS/script/install"
  if source $DOTS/script/install  | info_stream #2>&1
  then
    success "Dependencies installed"
  else
    fail "Error installing dependencies"
  fi
fi

echo ''
success 'All installed!'
echo ''
